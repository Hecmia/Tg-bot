from handlers.start import Message, FSMContext, ReplyKeyboardRemove
from keyboards.for_contacts import get_kb_contacts
from aiogram import Router, F
from handlers.class_state import MainStates
from keyboards.for_fil_group import get_fil_group
from models.find_teacher import *
from handlers.dict import *
from keyboards.for_fil_dep import get_fil_dep


router = Router()



@router.message(F.text == "–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ñ–µ–¥—Ä–µ")
async def search_by_department(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ñ–µ–¥—Ä—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", reply_markup=ReplyKeyboardRemove())
    await state.set_state(MainStates.waiting_for_dep)


@router.message(MainStates.waiting_for_dep)
async def search_by_department1(message: Message, state: FSMContext):
    await message.answer(f'–ö–∞—Ñ–µ–¥—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ - {message.text}.')
    data_dep_dep[message.chat.id] = ("–ö–∞—Ñ–µ–¥—Ä–∞ " + message.text)
    data_dep_to_search[message.chat.id] = data_dep_dep[message.chat.id]
    await state.clear()
    dep_to_search = "–ö–∞—Ñ–µ–¥—Ä–∞ " + message.text
    results = find_teacher_by_department(dep_to_search)
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
        await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}', reply_markup=get_fil_group())
    else:
        await message.answer(f'–ö–∞—Ñ–µ–¥—Ä–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(MainStates.waiting_for_dep)


@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≥—Ä—É–ø–ø–µüè´")
async def search_by_group_and_department(message: Message, state: FSMContext):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã', reply_markup=ReplyKeyboardRemove())
    await state.set_state(MainStates.waiting_gr_teacher)


@router.message(MainStates.waiting_gr_teacher)
async def search_by_group_and_department1(message: Message, state: FSMContext):
    dep_to_search = data_dep_dep.get(message.chat.id)
    group_to_search = message.text
    data_group_to_search[message.chat.id] = group_to_search
    data_dep_to_search[message.chat.id] = dep_to_search
    results = find_teacher_by_group_and_department(dep_to_search, group_to_search)
    st = ""
    await state.clear()
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–ù–∞ —ç—Ç–æ–π –∫–∞—Ñ–µ–¥—Ä–µ –Ω–∏–∫—Ç–æ –Ω–µ –≤–µ–¥–µ—Ç —ç—Ç—É –≥—Ä—É–ø–ø—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ–Ω—è–π—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã')
        await state.set_state(MainStates.waiting_gr_teacher)

    if len(results) >= 2:
        await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', reply_markup=ReplyKeyboardRemove())
        await state.set_state(MainStates.waiting_for_name1)

    elif len(results) == 1:
        await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
        data_name_to_search[message.chat.id] = st.strip()
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=get_kb_contacts())


@router.message(MainStates.waiting_for_name1)
async def search_by_name_and_department(message: Message, state: FSMContext):
    name_to_search = message.text
    data_name_to_search[message.chat.id] = message.text
    await state.clear()
    cursor.execute('SELECT name, department FROM teachers WHERE name LIKE ? AND department LIKE ?',
                   (f'%{name_to_search}%',f'%{data_dep_to_search.get(message.chat.id)}%',))
    results = cursor.fetchall()
    st = ""
    await state.clear()
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            cleaned_row2 = row[1].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –§–ò–û, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞')
        await state.set_state(MainStates.waiting_for_name1)


    if len(results) >= 2:
        await message.answer(f'–ù–∞—à–ª–æ—Å—å –±–æ–ª—å—à–µ 1 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\n{", ".join(st)}\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
        await state.set_state(MainStates.waiting_full_name)
    elif len(results) == 1:
        data_name_to_search[message.chat.id] = st.strip()
        await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
        await message.answer(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', reply_markup=get_kb_contacts())


@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞üè´")
async def search_by_name_and_department(message: Message, state: FSMContext):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', reply_markup=ReplyKeyboardRemove())
    await state.set_state(MainStates.waiting_name_teacher1)


@router.message(MainStates.waiting_name_teacher1)
async def search_by_name_and_department1(message: Message, state: FSMContext):
    data_name_to_search[message.chat.id] = message.text
    dep_to_search = data_dep_dep.get(message.chat.id)
    name_to_search = message.text
    results = find_by_name_and_department(name_to_search, dep_to_search)
    st = ""
    await state.clear()
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–¢–∞–∫–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑')
        await state.set_state(MainStates.waiting_name_teacher1)
    if len(results) >= 2:
        await message.answer(f'–ù–∞—à–ª–æ—Å—å –±–æ–ª—å—à–µ 1 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\n{", ".join(st)}\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
        await state.set_state(MainStates.waiting_full_name)
    elif len(results) == 1:
        data_name_to_search[message.chat.id] = st.strip()
        await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
        await message.answer(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', reply_markup=get_kb_contacts())


@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—Éüè´")
async def search_by_department_and_subject(message: Message, state: FSMContext):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞', reply_markup=ReplyKeyboardRemove())
    await state.set_state(MainStates.waiting_for_sub_sub)


@router.message(MainStates.waiting_for_sub_sub)
async def search_by_department_and_subject1(message: Message, state: FSMContext):
    dep_to_search = data_dep_dep.get(message.chat.id)
    sub_to_search = message.text
    data_dep_to_search[message.chat.id] = dep_to_search
    data_sub_to_search[message.chat.id] = sub_to_search
    results = find_by_department_and_subject(dep_to_search, sub_to_search)
    st = ""
    await state.clear()
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–ü—Ä–µ–¥–º–µ—Ç –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await state.set_state(MainStates.waiting_for_sub_sub)
    if len(results) >= 2:
        await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', reply_markup=ReplyKeyboardRemove())
        await state.set_state(MainStates.waiting_for_name2)
    elif len(results) == 1:
        await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
        data_name_to_search[message.chat.id] = st
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=get_kb_contacts())


@router.message(MainStates.waiting_for_name2)
async def search_by_department_name_subject(message: Message, state: FSMContext):
    name_to_search = message.text
    data_name_to_search[message.chat.id] = message.text
    await state.clear()
    results = find_by_department_name_subject(name_to_search, data_dep_to_search.get(message.chat.id), data_sub_to_search.get(message.chat.id))
    st = ""
    await state.clear()
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            cleaned_row2 = row[1].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await state.set_state(MainStates.waiting_for_name2)
    if len(results) >= 2:
        await message.answer(f'–ù–∞—à–ª–æ—Å—å –±–æ–ª—å—à–µ 1 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\n{", ".join(st)}\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
        await state.set_state(MainStates.waiting_full_name)
    elif len(results) == 1:
        data_name_to_search[message.chat.id] = st.strip()
        await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
        await message.answer(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', reply_markup=get_kb_contacts())