from cgitb import handler
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from keyboards.for_questions import get_kb
from keyboards.for_reviews import get_kb_reviews
from aiogram import Bot, Dispatcher
from keyboards.for_do_you_know_teachers import get_kb_do_you_know_teacher
from keyboards.for_contacts import get_kb_contacts
from keyboards.for_schedule import get_kb_schedule
from aiogram import Bot, Router, Dispatcher, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from keyboards.for_filters import get_kb_poisk
from keyboards.for_grops import get_kb_group
from keyboards.for_yes_no import get_yes_no_sub
from keyboards.for_fil2 import get_filtr_subject
from keyboards.for_fil3 import get_fil_a
from keyboards.for_fil4 import get_fil_c
from keyboards.for_fil5 import get_fil_b

class StudentStates(StatesGroup):
    waiting_for_group = State()

class TeacherStates(StatesGroup):
    waiting_for_group1 = State()

class I_TeacherStates(StatesGroup):
    waiting_for_kaf = State()

class DepartmentStates(StatesGroup):
    waiting_for_dep = State()

class SubStates(StatesGroup):
    waiting_for_sub = State()

class NameStates(StatesGroup):
    waiting_for_name = State()

class DeparStates(StatesGroup):
    waiting_for_depar = State()

class SubGrStates(SubStates):
    waiting_for_g = State()

class SubDepStates(SubStates):
    waiting_for_d = State()

class TeacherGroupStates(StatesGroup):
    waiting_for_group_teacher = State()

class TeacherGStates(StatesGroup):
    waiting_for_g_teacher = State()

class GrSubStates(StatesGroup):
    waiting_for_sub_teacher = State()

class TeacherGrStates(StatesGroup):
    waiting_name_teacher = State()

class DepGrStates(StatesGroup):
    waiting_gr_teacher = State()

class DepNameStates(StatesGroup):
    waiting_name_teacher = State()

class TeacherSubSubStates(StatesGroup):
    waiting_for_sub_sub= State()

class TeacherName1States(StatesGroup):
    waiting_for_name1 = State()

class TeacherName2States(StatesGroup):
    waiting_for_name2 = State()

class TeacherName3States(StatesGroup):
    waiting_for_name3 = State()

class TeacherName4States(StatesGroup):
    waiting_for_name4 = State()

class TeacherName5States(StatesGroup):
    waiting_for_name5 = State()

class TeacherName6States(StatesGroup):
    waiting_for_name6 = State()

dp = Dispatcher(storage=MemoryStorage())

#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–¥
import sqlite3
connection = sqlite3.connect('database.db')
cursor = connection.cursor()



data_dep_dep = {}
data_sub_u = {}
data_dep_user = {}
data_name_teacher = {}
data_sub = {}
data_users_student = {}
data_users_teacher = {}
data_group_user = {}
data_group_teacher = {}
data_dep_u = {}
data_name_to_search = {}

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å! –≠—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –∞ —Ç–∞–∫–∂–µ –æ—Ç–∑—ã–≤–æ–≤ –æ –Ω–∏—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª!",
        reply_markup=get_kb()
    )

@router.message(F.text == "–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
async def i_teacher(message: Message, state: FSMContext):
    chat_id = message.chat.id
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ñ–µ–¥—Ä—ã")
    await state.set_state(I_TeacherStates.waiting_for_kaf)

@router.message(I_TeacherStates.waiting_for_kaf)
async def fun3(message: Message, state: FSMContext):
    data_users_teacher[message.chat.id] = message.text
    await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à–∞ –∫–∞—Ñ–µ–¥—Ä–∞ - {data_users_teacher.get(message.chat.id)}.')
    await state.clear()
    await message.answer(f'–í—ã –∑–Ω–∞–µ—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è?', reply_markup = get_kb_do_you_know_teacher())

@router.message(F.text == "–Ø —Å—Ç—É–¥–µ–Ω—Ç")
async def i_student(message: Message, state: FSMContext):
    chat_id = message.chat.id
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã")
    await state.set_state(StudentStates.waiting_for_group)

@router.message(StudentStates.waiting_for_group)
async def fun1(message: Message, state: FSMContext):
    data_users_student[message.chat.id] = message.text
    await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞ - {data_users_student.get(message.chat.id)}.')
    await state.clear()
    await message.answer(f'–í—ã –∑–Ω–∞–µ—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è?', reply_markup = get_kb_do_you_know_teacher())

@router.message(F.text == "–ö–Ω–∏–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ —Ç–≥ –±–æ—Ç")
async def reviews_bot(message: Message):
    await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–ª–æ–∫–µ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–≥ –±–æ—Ç–µ")

@router.message(F.text == "–û—Ç–∑—ã–≤—ã –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö")
async def reviews_professors(message: Message):
    await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–ª–æ–∫–µ –æ—Ç–∑—ã–≤–æ–≤ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö", reply_markup=get_kb_reviews())

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤")
async def create_professor(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")

@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
async def view(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")

@router.message(F.text == "–Ø –∑–Ω–∞—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
async def i_know_teacher(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    await state.set_state(TeacherStates.waiting_for_group1)

@router.message(F.text == "–Ø –Ω–µ –∑–Ω–∞—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
async def i_know_teacher(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞", reply_markup=get_kb_poisk())

@router.message(TeacherStates.waiting_for_group1)
async def fun2(message: Message, state: FSMContext):
    data_name_to_search[message.chat.id] = message.text
    cursor.execute('SELECT name, department FROM teachers WHERE name LIKE ?', (f'%{message.text.strip()}%',))
    results = cursor.fetchall()
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            cleaned_row2 = row[1].strip()
            await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {cleaned_row1}; {cleaned_row2}')
    else:
        await message.answer(f'–¢–∞–∫–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç')
    await state.clear()
    await message.answer(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', reply_markup=get_kb_contacts())

@router.message(F.text == "–ù–µ —Ç–æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
async def fun4(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    await state.set_state(TeacherStates.waiting_for_group1)

@router.message(F.text == "–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ñ–µ–¥—Ä–µ")
async def reviews_bot(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ñ–µ–¥—Ä—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    await state.set_state(DepartmentStates.waiting_for_dep)

@router.message(DepartmentStates.waiting_for_dep)
async def fun5(message: Message, state: FSMContext):
    await message.answer(f'–ö–∞—Ñ–µ–¥—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ - {message.text}.')
    data_dep_dep[message.chat.id] = ("–ö–∞—Ñ–µ–¥—Ä–∞ " + message.text)
    await state.clear()
    dep_to_search = "–ö–∞—Ñ–µ–¥—Ä–∞ " + message.text
    cursor.execute('SELECT name FROM teachers WHERE department LIKE ?', (f'%{dep_to_search}%',))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–ù–∞ —ç—Ç–æ–π –∫–∞—Ñ–µ–¥—Ä–µ –ø—É—Å—Ç–æ')
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}', reply_markup = get_fil_b())

@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≥—Ä—É–ø–ø–µüíú")
async def fun15(message: Message, state: FSMContext):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã')
    await state.set_state(DepGrStates.waiting_gr_teacher)

@router.message(DepGrStates.waiting_gr_teacher)
async def funG15(message: Message, state: FSMContext):
    dep_to_search = data_dep_dep.get(message.chat.id)
    group_to_search = message.text
    cursor.execute('SELECT name FROM teachers WHERE department LIKE ? AND groups LIKE ?', (f'%{dep_to_search}%', f'%{group_to_search}%', ))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–ù–∞ —ç—Ç–æ–π –∫–∞—Ñ–µ–¥—Ä–µ –ø—É—Å—Ç–æ')
    await state.clear()
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
    if len(results) >= 2:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
        await state.set_state(TeacherName1States.waiting_for_name1)
    else:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup = get_kb_contacts())

@router.message(TeacherName1States.waiting_for_name1)
async def fun_name(message: Message, state: FSMContext):
    name_to_search = message.text
    data_name_to_search[message.chat.id] = message.text
    await state.clear()
    cursor.execute('SELECT name, department FROM teachers WHERE name LIKE ?',
                   (f'%{name_to_search}%',))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            cleaned_row2 = row[1].strip()
            st += "\n" + cleaned_row1 + ";" + cleaned_row2
    else:
        await message.answer(f'–û—à–∏–±–∫–∞')
    await state.clear()
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}', reply_markup = get_kb_contacts())




@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞üíú")
async def fun17(message: Message, state: FSMContext):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
    await state.set_state(DepNameStates.waiting_name_teacher)




@router.message(DepNameStates.waiting_name_teacher)
async def funG17(message: Message, state: FSMContext):
    data_name_to_search[message.chat.id] = message.text
    dep_to_search = data_dep_dep.get(message.chat.id)
    name_to_search = message.text
    cursor.execute('SELECT name FROM teachers WHERE department LIKE ? AND name LIKE ?', (f'%{dep_to_search}%', f'%{name_to_search}%', ))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø—É—Å—Ç–æ')
    await state.clear()
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}', reply_markup = get_kb_contacts())

@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—Éüíú")
async def fun16(message: Message, state: FSMContext):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞')
    await state.set_state(TeacherSubSubStates.waiting_for_sub_sub)

@router.message(TeacherSubSubStates.waiting_for_sub_sub)
async def funG16(message: Message, state: FSMContext):
    dep_to_search = data_dep_dep.get(message.chat.id)
    sub_to_search = message.text
    cursor.execute('SELECT name FROM teachers WHERE department LIKE ? AND subjects LIKE ?',
                   (f'%{dep_to_search}%', f'%{sub_to_search}%',))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–ù–∞ —ç—Ç–æ–π –∫–∞—Ñ–µ–¥—Ä–µ –ø—É—Å—Ç–æ')
    await state.clear()
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
    if len(results) >= 2:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
        await state.set_state(TeacherName1States.waiting_for_name1)
    else:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=get_kb_contacts())





@router.message(F.text == "–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É")
async def reviews_bot(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
    await state.set_state(SubStates.waiting_for_sub)

@router.message(SubStates.waiting_for_sub)
async def fun6(message: Message, state: FSMContext):
    data_sub[message.chat.id] = message.text
    await message.answer(f'–í—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É –¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç - {data_sub.get(message.chat.id)}?', reply_markup=get_yes_no_sub())
    await state.clear()

@router.message(F.text == "–î–∞, —ç—Ç–æ –≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
async def true_sub(message: Message):
    sub_to_search = data_sub.get(message.chat.id)
    cursor.execute('SELECT name FROM teachers WHERE subjects LIKE ?', (f'%{sub_to_search}%',))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–ù–∏–∫—Ç–æ –Ω–µ –≤–µ–¥–µ—Ç –¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}', reply_markup = get_filtr_subject())

@router.message(F.text == "–ù–µ—Ç, —ç—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
async def false_sub(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
    await state.set_state(SubStates.waiting_for_sub)

@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞")
async def vvod_name(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    await state.set_state(NameStates.waiting_for_name)

@router.message(NameStates.waiting_for_name)
async def fun7(message: Message, state: FSMContext):
    sub_to_search = data_sub.get(message.chat.id)
    name_to_search = message.text
    cursor.execute('SELECT name, department FROM teachers WHERE name LIKE ? AND subjects LIKE ?', (f'%{name_to_search}%', f'%{sub_to_search}%'))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            cleaned_row2 = row[1].strip()
            st += "\n" + cleaned_row1 + "; " + cleaned_row2
    else:
        await message.answer(f'–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}', reply_markup = get_kb_contacts())
    await state.clear()

@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≥—Ä—É–ø–ø–µ")
async def fil_group(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É")
    await state.set_state(SubGrStates.waiting_for_g)

@router.message(SubGrStates.waiting_for_g)
async def fun9(message: Message, state: FSMContext):
    data_group_user[message.chat.id] = message.text
    sub_to_search = data_sub.get(message.chat.id)
    group_to_search = data_group_user.get(message.chat.id)
    cursor.execute('SELECT name, department FROM teachers WHERE groups LIKE ? AND subjects LIKE ?',(f'%{group_to_search}%', f'%{sub_to_search}%'))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            cleaned_row2 = row[1].strip()
            st += "\n" + cleaned_row1 + "; " + cleaned_row2
    else:
        await message.answer(f'–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
    await state.clear()
    if len(results) >= 2:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
        await state.set_state(TeacherName1States.waiting_for_name1)
    else:
        data_name_to_search[message.chat.id] = cleaned_row1
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=get_kb_contacts())

@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞—Ñ–µ–¥—Ä–µ")
async def fil_dep(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ñ–µ–¥—Ä—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    await state.set_state(SubDepStates.waiting_for_d)

@router.message(SubDepStates.waiting_for_d)
async def fun10(message: Message, state: FSMContext):
    data_dep_user[message.chat.id] = message.text
    sub_to_search = data_sub.get(message.chat.id)
    dep_to_search = f'–ö–∞—Ñ–µ–¥—Ä–∞ {data_dep_user.get(message.chat.id)}'
    #print(dep_to_search, sub_to_search )
    cursor.execute('SELECT name, department FROM teachers WHERE department LIKE ? AND subjects LIKE ?',(f'%{dep_to_search}%', f'%{sub_to_search}%'))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            cleaned_row2 = row[1].strip()
            st += "\n" + cleaned_row1 + "; " + cleaned_row2
    else:
        await message.answer(f'–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
    await state.clear()

@router.message(F.text == "–ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–µ")
async def search_gr(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É")
    await state.set_state(TeacherGroupStates.waiting_for_group_teacher)

@router.message(TeacherGroupStates.waiting_for_group_teacher)
async def funG(message: Message, state: FSMContext):
    await message.answer(f'–ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ - {message.text}.')
    await state.clear()
    data_group_teacher[message.chat.id] = message.text
    group_to_search = message.text
    cursor.execute('SELECT name FROM teachers WHERE groups LIKE ?', (f'%{group_to_search}%',))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø—É—Å—Ç–æ')
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}', reply_markup = get_fil_a())

@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞—Ñ–µ–¥—Ä–µ‚ù§Ô∏è")
async def fun11(message: Message, state: FSMContext):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ñ–µ–¥—Ä—ã')
    await state.set_state(TeacherGStates.waiting_for_g_teacher)

@router.message(TeacherGStates.waiting_for_g_teacher)
async def funG11(message: Message, state: FSMContext):
    group_to_search = data_group_teacher.get(message.chat.id)
    data_dep_u[message.chat.id] = message.text
    dep_to_search = data_dep_u.get(message.chat.id)
    cursor.execute('SELECT name FROM teachers WHERE groups LIKE ? AND department LIKE ?', (f'%{group_to_search}%', f'%{dep_to_search}%', ))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø—É—Å—Ç–æ')
    await state.clear()
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
    if len(results) >= 2:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
        await state.set_state(TeacherName1States.waiting_for_name1)
    else:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup = get_kb_contacts())




@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É‚ù§Ô∏è")
async def fun12(message: Message, state: FSMContext):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞')
    await state.set_state(GrSubStates.waiting_for_sub_teacher)

@router.message(GrSubStates.waiting_for_sub_teacher)
async def funG12(message: Message, state: FSMContext):
    group_to_search = data_group_teacher.get(message.chat.id)
    data_sub_u[message.chat.id] = message.text
    sub_to_search = data_sub_u.get(message.chat.id)
    cursor.execute('SELECT name FROM teachers WHERE groups LIKE ? AND subjects LIKE ?', (f'%{group_to_search}%', f'%{sub_to_search}%', ))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø—É—Å—Ç–æ')
    await state.clear()
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')
    if len(results) >= 2:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
        await state.set_state(TeacherName1States.waiting_for_name1)
    else:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup = get_kb_contacts())





@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞‚ù§Ô∏è")
async def fun13(message: Message, state: FSMContext):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
    await state.set_state(TeacherGrStates.waiting_name_teacher)





@router.message(TeacherGrStates.waiting_name_teacher)
async def funG13(message: Message, state: FSMContext):
    data_name_to_search[message.chat.id] = message.text
    group_to_search = data_group_teacher.get(message.chat.id)
    name_to_search = message.text
    cursor.execute('SELECT name FROM teachers WHERE groups LIKE ? AND name LIKE ?', (f'%{group_to_search}%', f'%{name_to_search}%', ))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            st += "\n" + cleaned_row1
    else:
        await message.answer(f'–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø—É—Å—Ç–æ')
    await state.clear()
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}', reply_markup = get_kb_contacts())

@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: Message):
    name_to_search = data_name_to_search.get(message.chat.id)
    cursor.execute('SELECT name, contacts FROM teachers WHERE name LIKE ?',
                   (f'%{name_to_search}%',))
    results = cursor.fetchall()
    st = ""
    if results != []:
        for row in results:
            cleaned_row1 = row[0].strip()
            cleaned_row2 = row[1].strip()
            st += "\n" + cleaned_row1 + ". –ö–æ–Ω—Ç–∞–∫—Ç—ã: " + cleaned_row2
    else:
        await message.answer(f'–û—à–∏–±–∫–∞')
    await message.answer(f'–ù–∞—à–µ–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {st}')

